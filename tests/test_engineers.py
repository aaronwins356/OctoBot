from __future__ import annotations

import json
from pathlib import Path
from typing import Any

import pytest

from octobot.agents.engineers.analyzer_agent import AnalyzerAgent
from octobot.agents.engineers.code_writer_agent import CodeWriterAgent
from octobot.agents.engineers.documentor_agent import DocumentorAgent
from octobot.agents.engineers.tester_agent import TesterAgent
from octobot.core.compiler import Compiler
from octobot.core.evaluator import Evaluation
from octobot.core.proposal_manager import ProposalManager
from octobot.memory.utils import repo_root


def test_analyzer_scans_repository() -> None:
    agent = AnalyzerAgent(repo_root=repo_root())
    report = agent.scan_repo()
    assert report["files"] >= 1


def test_code_writer_creates_suggestions() -> None:
    agent = CodeWriterAgent(repo_root=repo_root())
    report = {"findings": [{"file_path": "octobot/__init__.py", "issue_type": "complexity"}]}
    proposal_dir = agent.create_rewrite_candidates(report)
    suggestions = proposal_dir / "code" / "suggestions.json"
    assert suggestions.exists()


def test_code_writer_generates_default_plan() -> None:
    agent = CodeWriterAgent(repo_root=repo_root())
    proposal_dir = agent.create_rewrite_candidates({"findings": []})
    suggestions = json.loads(
        (proposal_dir / "code" / "suggestions.json").read_text(encoding="utf-8")
    )
    assert suggestions[0]["file"] == "README.md"
    assert (
        agent._recommendation_for({"issue_type": "other"})
        == "Review this item manually for the optimal adjustment."
    )


def test_documentor_rebuilds_docs(tmp_path: Path) -> None:
    agent = DocumentorAgent(repo_root_path=repo_root())
    agent.rebuild_docs()
    docs_dir = repo_root() / "docs"
    for filename in ["index.md", "architecture.md", "laws.md", "developer_guide.md"]:
        assert (docs_dir / filename).exists()


def test_documentor_summary() -> None:
    agent = DocumentorAgent(repo_root_path=repo_root())
    proposal_dir = repo_root() / "proposals" / "_workspace" / "summary_test"
    path = agent.write_summary(proposal_dir, {"topic": "Testing", "risk": "low"})
    assert path.exists()


def test_tester_agent_skips_inside_pytest(monkeypatch: pytest.MonkeyPatch) -> None:
    monkeypatch.setenv("PYTEST_CURRENT_TEST", "1")
    agent = TesterAgent(repo_root=repo_root())
    result = agent.run_tests()
    assert result["status"] == "skipped"


def test_tester_agent_handles_missing_pytest(monkeypatch: pytest.MonkeyPatch) -> None:
    monkeypatch.delenv("PYTEST_CURRENT_TEST", raising=False)
    monkeypatch.delenv("OCTOBOT_ALLOW_TEST_SKIP", raising=False)

    def raise_missing(*args: Any, **kwargs: Any) -> Any:
        raise FileNotFoundError()

    monkeypatch.setattr("octobot.agents.engineers.tester_agent.subprocess.run", raise_missing)
    agent = TesterAgent(repo_root=repo_root())
    result = agent.run_tests()
    assert result["status"] == "skipped"


def test_tester_agent_reports_success(monkeypatch: pytest.MonkeyPatch) -> None:
    monkeypatch.delenv("PYTEST_CURRENT_TEST", raising=False)
    monkeypatch.delenv("OCTOBOT_ALLOW_TEST_SKIP", raising=False)

    class DummyResult:
        returncode = 0
        stdout = "ok"

    monkeypatch.setattr(
        "octobot.agents.engineers.tester_agent.subprocess.run",
        lambda *args, **kwargs: DummyResult(),
    )
    agent = TesterAgent(repo_root=repo_root())
    result = agent.run_tests()
    assert result["status"] == "passed"


def test_compiler_export(tmp_path: Path) -> None:
    manager = ProposalManager()
    proposal = manager.generate("Compiled", {"coverage": 0.95, "findings": []})
    evaluation = Evaluation(
        proposal_id=proposal.proposal_id,
        complexity=0.5,
        tests=0.95,
        docs=0.8,
        risk=0.1,
        rationale="autogenerated",
    )
    compiler = Compiler(repo_root=repo_root())
    path = compiler.export([proposal], [evaluation])
    assert path.exists()
