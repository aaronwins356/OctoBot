"""Documentation generator for OctoBot proposals."""
from __future__ import annotations

from pathlib import Path
from typing import Dict, Iterable

from laws.validator import DEFAULT_VALIDATOR
from memory.history_logger import HistoryLogger


class DocumentorAgent:
    def __init__(self, repo_root: Path | None = None, logger: HistoryLogger | None = None) -> None:
        self.repo_root = repo_root or Path.cwd()
        self.logger = logger or HistoryLogger()

    def write_summary(self, proposal_dir: Path, context: Dict[str, str]) -> Path:
        DEFAULT_VALIDATOR.ensure(["human approval", "rationale logged"])
        documentation = proposal_dir / "SUMMARY.md"
        documentation.write_text(
            "# Proposal Summary\n\n"
            f"## Topic\n{context.get('topic', 'General maintenance')}\n\n"
            f"## Rationale\n{context.get('rationale', 'Automated suggestion based on analyzer report.')}\n\n"
            f"## Highlights\n- Impact: {context.get('impact', 'medium')}\n"
            f"- Risk: {context.get('risk', 'low')}\n\n"
            "## Notes\nThis document was generated by the DocumentorAgent and requires human review before publication.\n",
            encoding="utf-8",
        )
        self.logger.log_event(f"Documentation summary created at {documentation}")
        return documentation
